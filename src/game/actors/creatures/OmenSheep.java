package game.actors.creatures;

import edu.monash.fit2099.engine.actions.Action;
import edu.monash.fit2099.engine.actions.ActionList;
import edu.monash.fit2099.engine.actions.DoNothingAction;
import edu.monash.fit2099.engine.actors.Actor;
import edu.monash.fit2099.engine.displays.Display;
import edu.monash.fit2099.engine.items.Item;
import edu.monash.fit2099.engine.positions.Exit;
import edu.monash.fit2099.engine.positions.GameMap;
import edu.monash.fit2099.engine.positions.Location;
import game.behaviours.ProduceBehaviour;
import game.behaviours.WanderBehaviour;
import game.behaviours.behaviourselectors.BehaviourSelector;
import game.capabilities.GeneralCapability;
import game.hatching.OmenSheepEgg;
import game.healing.Curable;
import game.healing.CureAction;
import game.plants.Inheritree;
import game.weapons.actions.AttackAction;

/**
 * Represents an Omen Sheep monster in the game. Omen Sheep wander around the map using
 * {@link WanderBehaviour}. They can be attacked by actors with
 * {@link GeneralCapability#HOSTILE_TO_ENEMY}. They are susceptible to Crimson Rot, managed
 * internally via the {@link Rotatable} interface, causing them to become unconscious after a set
 * number of turns ({@value #INITIAL_ROT_COUNTDOWN}). When targeted by a "cure" action (via the
 * {@link Curable} interface and {@link CureAction}), instead of having their rot timer reset, they
 * cause {@link Inheritree} plants to grow on adjacent tiles. Omen Sheep can also produce
 * {@link OmenSheepEgg} periodically.
 */
public class OmenSheep extends Creature implements Curable, Rotatable, ActorProducible {

    /**
     * Display character representing the Omen Sheep on the game map.
     */
    private final static char DISPLAY_CHAR = 'm';
    /**
     * Initial hit points (health) of the Omen Sheep.
     */
    private final static int HIT_POINTS = 75;
    /**
     * The name of this creature type.
     */
    private final static String NAME = "Omen Sheep";
    /**
     * The initial number of turns the Omen Sheep survives with Crimson Rot before becoming
     * unconscious.
     */
    public static final int INITIAL_ROT_COUNTDOWN = 15;

    /**
     * Tracks the remaining turns before the rot effect expires.
     */
    private int currentRotCountdown;

    /**
     * Counter for turns since the last egg was produced.
     */
    private int turnsSinceEggProduced = 0;
    /**
     * The number of turns that must pass before the Omen Sheep can produce another egg.
     */
    private static final int EGG_PRODUCTION_INTERVAL = 7;

    /**
     * Priority for the {@link ProduceBehaviour}. Higher priority means it's considered first.
     */
    private static final int PRIORITY_PRODUCE = 1; // High priority
    /**
     * Priority for the {@link WanderBehaviour}. Lower priority than producing.
     */
    private static final int PRIORITY_WANDER = 999; // Lower priority

    /**
     * Constructor for the OmenSheep with default priority behaviour selector. Initializes the sheep
     * with its name, display character, hit points, and sets the initial rot countdown.
     */
    public OmenSheep() {
        super(OmenSheep.NAME, OmenSheep.DISPLAY_CHAR, OmenSheep.HIT_POINTS);
        this.currentRotCountdown = this.getInitialRotCountdown();
    }

    /**
     * Constructor with custom behaviour selector.
     *
     * @param behaviourSelector the strategy for selecting behaviours
     */
    public OmenSheep(BehaviourSelector behaviourSelector) {
        super(OmenSheep.NAME, OmenSheep.DISPLAY_CHAR, OmenSheep.HIT_POINTS, behaviourSelector);
        this.currentRotCountdown = this.getInitialRotCountdown();
    }

    /**
     * Initialize the behaviours for Omen Sheep. Priority order: Reproduce -> Wander
     */
    @Override
    protected void initializeBehaviours() {
        this.addBehaviour(PRIORITY_PRODUCE, new ProduceBehaviour(this));
        this.addBehaviour(PRIORITY_WANDER, new WanderBehaviour());
    }

    /**
     * Selects and performs an action for the current turn. First, ticks the internal rot countdown.
     * If the sheep becomes unconscious due to rot, it does nothing further. Increments the egg
     * production counter. Otherwise, it selects an action based on its behaviours (e.g.,
     * WanderBehaviour, ProduceBehaviour).
     *
     * @param actions    Collection of possible Actions for this Actor (potentially generated by
     *                   behaviours).
     * @param lastAction The Action this Actor took last turn.
     * @param map        The map containing the Actor.
     * @param display    The I/O object to which messages may be written.
     * @return The Action to be performed, or {@link DoNothingAction} if unconscious.
     */
    @Override
    public Action playTurn(ActionList actions, Action lastAction, GameMap map, Display display) {
        this.tickRotCountdown(map);
        if (this.isRotExpired()) {
            return new DoNothingAction();
        }

        this.turnsSinceEggProduced++;

        return super.playTurn(actions, lastAction, map, display);
    }


    /**
     * Returns a list of actions that the {@code otherActor} can perform on this OmenSheep. Allows
     * {@link AttackAction} if the {@code otherActor} has the
     * {@link GeneralCapability#HOSTILE_TO_ENEMY} capability. Allows {@link CureAction} if the
     * {@code otherActor} is carrying an item with the {@link GeneralCapability#CAN_CURED}
     * capability and this OmenSheep is conscious.
     *
     * @param otherActor The actor that might be performing an action.
     * @param direction  String representing the direction of the other Actor (not used in current
     *                   logic but available).
     * @param map        The current GameMap.
     * @return An {@link ActionList} containing allowable actions.
     */
    @Override
    public ActionList allowableActions(Actor otherActor, String direction, GameMap map) {
        ActionList actions = super.allowableActions(otherActor, direction,
                map); // Include default allowable actions if any

        // Allow "cure" (Inheritree spawning) if the other actor has a curable item and the sheep is conscious
        if (this.isConscious()) {
            for (Item item : otherActor.getItemInventory()) {
                if (item.hasCapability(GeneralCapability.CAN_CURED)) {
                    // CureAction targets this sheep at its current location
                    actions.add(new CureAction(this, map.locationOf(this), item));
                    // break; // Optional: If only one cure item should grant the action
                }
            }
        }
        // Allow attack if the other actor is hostile
        if (otherActor.hasCapability(GeneralCapability.HOSTILE_TO_ENEMY)) {
            actions.add(new AttackAction(this, direction));
        }

        return actions;
    }

    /**
     * Applies the special "cure" effect specific to the Omen Sheep. Instead of affecting the
     * sheep's rot status, this action causes {@link Inheritree} plants to replace the ground on all
     * adjacent tiles.
     *
     * @param healer       The actor performing the action.
     * @param cureLocation The location of this Omen Sheep where the effect is centered.
     * @param healingItem  The item used to trigger the effect.
     * @return A string describing the transformation effect (Inheritrees sprouting).
     */
    @Override
    public String cure(Actor healer, Location cureLocation, Item healingItem) {
        // Iterate through exits of the sheep's location
        for (Exit exit : cureLocation.getExits()) {
            Location destination = exit.getDestination();
            // Replace the ground at the destination with an Inheritree
            destination.setGround(new Inheritree());
        }
        // Return a message describing the transformation effect
        return "Using " + healingItem + " on " + this + " causes Inheritrees to sprout nearby.";
    }

    /**
     * Gets the stamina cost required to trigger the "cure" (Inheritree sprouting) effect on this
     * Omen Sheep. This specific interaction does not cost stamina.
     *
     * @return Always 0, as no stamina is required for this effect.
     */
    @Override
    public int getCureStaminaCost() {
        return 0; // No stamina cost for this specific interaction
    }

    /**
     * Decrements the internal rot countdown timer by one each turn. If the countdown reaches zero
     * or less ({@link #isRotExpired()} becomes true), it triggers the sheep's unconscious state
     * using {@link #unconscious(GameMap)}. Prints the remaining time to the console (optional).
     *
     * @param map The {@link GameMap} the sheep is currently on.
     */
    @Override
    public void tickRotCountdown(GameMap map) {
        if (currentRotCountdown > 0) {
            currentRotCountdown--;
            if (isRotExpired()) {
                // Handle expiry - make the actor unconscious
                this.unconscious(map); // Call the existing unconscious method inherited from Actor
            }
        }
    }

    /**
     * Checks if the Omen Sheep can produce an egg. It can produce if the number of turns since the
     * last egg production meets or exceeds {@value #EGG_PRODUCTION_INTERVAL}.
     *
     * @param producer The Omen Sheep (unused, context is this instance).
     * @param map      The game map (unused).
     * @return true if the sheep can produce an egg, false otherwise.
     */
    @Override
    public boolean canProduceOffspring(Actor producer, GameMap map) {
        return this.turnsSinceEggProduced >= EGG_PRODUCTION_INTERVAL;
    }

    /**
     * Produces an {@link OmenSheepEgg} at the Omen Sheep's current location and resets the egg
     * production timer.
     *
     * @param producer The Omen Sheep (this instance).
     * @param map      The game map where the egg will be placed.
     * @return A string describing that the sheep laid an egg.
     */
    @Override
    public String produceOffspring(Actor producer, GameMap map) {
        Location producerLocation = map.locationOf(producer);

        producerLocation.addItem(new OmenSheepEgg());
        this.turnsSinceEggProduced = 0; // Reset counter
        return producer + " lays a OmenSheepEgg at (" + producerLocation.x() + ","
                + producerLocation.y() + ")!";
    }

    /**
     * Resets the rot countdown timer. For Omen Sheep, this method has no effect as per game
     * requirements; their timer is not restored by curing. A message may be printed to the console
     * if resetting is attempted (optional).
     */
    @Override
    public void resetRotCountdown() {
    }

    /**
     * Checks if the rot countdown timer has reached zero or less.
     *
     * @return {@code true} if the countdown is less than or equal to 0, {@code false} otherwise.
     */
    @Override
    public boolean isRotExpired() {
        return currentRotCountdown <= 0;
    }

    /**
     * Gets the initial duration (in turns) for the rot countdown for Omen Sheep.
     *
     * @return The initial countdown value ({@value #INITIAL_ROT_COUNTDOWN}).
     */
    @Override
    public int getInitialRotCountdown() {
        return OmenSheep.INITIAL_ROT_COUNTDOWN;
    }

    /**
     * Gets the current remaining turns on the rot countdown.
     *
     * @return The current value of {@code currentRotCountdown}.
     */
    @Override
    public int getCurrentRotCountdown() {
        return this.currentRotCountdown;
    }
}